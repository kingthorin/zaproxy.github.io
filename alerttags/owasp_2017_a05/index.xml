<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OWASP_2017_A05 on ZAP</title>
    <link>/alerttags/owasp_2017_a05/</link>
    <description>Recent content in OWASP_2017_A05 on ZAP</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="/alerttags/owasp_2017_a05/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Absence of Anti-CSRF Tokens</title>
      <link>/docs/alerts/10202/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10202/</guid>
      <description>&lt;p&gt;No Anti-CSRF tokens were found in a HTML submission form.&#xA;A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Access Control Issue - Improper Authentication</title>
      <link>/docs/alerts/10101/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10101/</guid>
      <description>&lt;p&gt;Insufficient Authentication occurs when a web site permits an attacker to access sensitive content or functionality without having to properly authenticate. Web-based administration tools are a good example of web sites providing access to sensitive functionality. Depending on the specific online resource, these web applications should not be directly accessible without requiring the user to properly verify their identity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Access Control Issue - Improper Authorization</title>
      <link>/docs/alerts/10102/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10102/</guid>
      <description>&lt;p&gt;Insufficient Authorization results when an application does not perform adequate authorization checks to ensure that the user is performing a function or accessing data in a manner consistent with the security policy. Authorization procedures should enforce what a user, service or application is permitted to do. When a user is authenticated to a web site, it does not necessarily mean that the user should have full access to all content and functionality.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bypassing 403</title>
      <link>/docs/alerts/40038/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40038/</guid>
      <description>&lt;p&gt;Bypassing 403 endpoints may be possible, the scan rule sent a payload that caused the response to be accessible (status code 200).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cookie with Invalid SameSite Attribute</title>
      <link>/docs/alerts/10054-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10054-3/</guid>
      <description>&lt;p&gt;A cookie has been set with an invalid SameSite attribute value, which means that the cookie can be sent as a result of a &amp;lsquo;cross-site&amp;rsquo; request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cookie with SameSite Attribute None</title>
      <link>/docs/alerts/10054-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10054-2/</guid>
      <description>&lt;p&gt;A cookie has been set with its SameSite attribute set to &amp;ldquo;none&amp;rdquo;, which means that the cookie can be sent as a result of a &amp;lsquo;cross-site&amp;rsquo; request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cookie without SameSite Attribute</title>
      <link>/docs/alerts/10054-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10054-1/</guid>
      <description>&lt;p&gt;A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a &amp;lsquo;cross-site&amp;rsquo; request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CORS Header</title>
      <link>/docs/alerts/40040-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40040-1/</guid>
      <description>&lt;p&gt;Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any other origins (domain, scheme, or port) than its own from which a browser should permit loading of resources. It relaxes the Same-Origin Policy (SOP).&lt;/p&gt;</description>
    </item>
    <item>
      <title>CORS Misconfiguration</title>
      <link>/docs/alerts/40040-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40040-2/</guid>
      <description>&lt;p&gt;This CORS misconfiguration could allow an attacker to perform AJAX queries to the vulnerable website from a malicious page loaded by the victim&amp;rsquo;s user agent.&#xA;In order to perform authenticated AJAX queries, the server must specify the header &amp;ldquo;Access-Control-Allow-Credentials: true&amp;rdquo; and the &amp;ldquo;Access-Control-Allow-Origin&amp;rdquo; header must be set to null or the malicious page&amp;rsquo;s domain. Even if this misconfiguration doesn&amp;rsquo;t allow authenticated AJAX requests, unauthenticated sensitive content can still be accessed (e.g intranet websites).&#xA;A malicious page can belong to a malicious website but also a trusted website with flaws (e.g XSS, support of HTTP without TLS allowing code injection through MITM, etc).&lt;/p&gt;</description>
    </item>
    <item>
      <title>CORS Misconfiguration</title>
      <link>/docs/alerts/40040-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40040-3/</guid>
      <description>&lt;p&gt;This CORS misconfiguration could allow an attacker to perform AJAX queries to the vulnerable website from a malicious page loaded by the victim&amp;rsquo;s user agent.&#xA;In order to perform authenticated AJAX queries, the server must specify the header &amp;ldquo;Access-Control-Allow-Credentials: true&amp;rdquo; and the &amp;ldquo;Access-Control-Allow-Origin&amp;rdquo; header must be set to null or the malicious page&amp;rsquo;s domain. Even if this misconfiguration doesn&amp;rsquo;t allow authenticated AJAX requests, unauthenticated sensitive content can still be accessed (e.g intranet websites).&#xA;A malicious page can belong to a malicious website but also a trusted website with flaws (e.g XSS, support of HTTP without TLS allowing code injection through MITM, etc).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cross-Domain Misconfiguration</title>
      <link>/docs/alerts/10098/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10098/</guid>
      <description>&lt;p&gt;Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cross-Site WebSocket Hijacking</title>
      <link>/docs/alerts/100025/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/100025/</guid>
      <description>&lt;p&gt;Server accepted WebSocket connection through HTTP Upgrade request with modified Origin header.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deprecated Feature Policy Header Set</title>
      <link>/docs/alerts/10063-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10063-2/</guid>
      <description>&lt;p&gt;The header has now been renamed to Permissions-Policy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Directory Browsing</title>
      <link>/docs/alerts/0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/0/</guid>
      <description>&lt;p&gt;It is possible to view the directory listing. Directory listing may reveal hidden scripts, include files, backup source files, etc. which can be accessed to read sensitive information.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Path Traversal</title>
      <link>/docs/alerts/6-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/6-1/</guid>
      <description>&lt;p&gt;The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Path Traversal</title>
      <link>/docs/alerts/6-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/6-2/</guid>
      <description>&lt;p&gt;The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Path Traversal</title>
      <link>/docs/alerts/6-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/6-3/</guid>
      <description>&lt;p&gt;The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Path Traversal</title>
      <link>/docs/alerts/6-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/6-4/</guid>
      <description>&lt;p&gt;The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Path Traversal</title>
      <link>/docs/alerts/6-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/6-5/</guid>
      <description>&lt;p&gt;The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Permissions Policy Header Not Set</title>
      <link>/docs/alerts/10063-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10063-1/</guid>
      <description>&lt;p&gt;Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Session Fixation</title>
      <link>/docs/alerts/40013/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40013/</guid>
      <description>&lt;p&gt;Session Fixation may be possible. If this issue occurs with a login URL (where the user authenticates themselves to the application), then the URL may be given by an attacker, along with a fixed session id, to a victim, in order to later assume the identity of the victim using the given session id. If the issue occurs with a non-login page, the URL and fixed session id may only be used by an attacker to track an unauthenticated user&amp;rsquo;s actions. If the vulnerability occurs on a cookie field or a form field (POST parameter) rather than on a URL (GET) parameter, then some other vulnerability may also be required in order to set the cookie field on the victim&amp;rsquo;s browser, to allow the vulnerability to be exploited.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Actuator Information Leak</title>
      <link>/docs/alerts/40042/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40042/</guid>
      <description>&lt;p&gt;Spring Actuator for Health is enabled and may reveal sensitive information about this application. Spring Actuators can be used for real monitoring purposes, but should be used with caution as to not expose too much information about the application or the infrastructure running it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Username Hash Found</title>
      <link>/docs/alerts/10057/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10057/</guid>
      <description>&lt;p&gt;A hash of a username (admin) was found in the response. This may indicate that the application is subject to an Insecure Direct Object Reference (IDOR) vulnerability. Manual testing will be required to see if this discovery can be abused.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
